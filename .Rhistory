-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(43)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
output$configurations
dput(output$configurations[1:50])
dput(output$configurations[1:50,])
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
LIM_simulator <- function(n = 10, nreps = 100, tau, omega, beta, X1 = sample(c(-1,1),n,T), Hebb = T, e =.001, lambda = .001) {
if(n <= 0) {
stop("make sure n is a positive number")
}
if(nreps <= 0) {
stop("make sure nreps is a positive integer")
}
if(length(beta)!=1 && length(beta)!=nreps || !is.numeric(beta)) {
stop("make sure length(beta) is equal to 1 or nreps")
}
if(length(tau)!=n || !is.numeric(tau)) {
stop("make sure that length(tau)==n")
}
if(nrow(omega)!=n || ncol(omega)!=n || all(diag(omega)!=0) || !is.numeric(omega) || omega[lower.tri(omega)]!=t(omega)[lower.tri(omega)]) {
stop("make sure that omega is a symmetrical matrix with dimensions n*n and diag==0")
}
if(length(X1)!=n) {
stop("length(X1) must be n")
}
beta_use <- beta
if(length(beta)==1) {
beta_use <- rep(beta,nreps)
}
# wat ik nu heb: n, nreps, tau, omega, beta, X1
bm <- as.matrix(expand.grid(rep(list(0:1),n)))
bm[bm==0] <- -1
omega_save <- list(nreps)
dat <- matrix(0,nrow = nreps, ncol = n)
gibbs_entropy <- numeric(nreps)
did_flip <- numeric(nreps)
omega_mean <- numeric(nreps)
prog = dplyr::progress_estimated(nreps)
for(i in 1:nreps) {
omega_save[[i]] <- omega
dat[i,] <- X1
pi_bm <- probability_bm(omega = omega,tau = tau,n = n,beta = beta_use[i],bm = bm)
gibbs_entropy[i] <- entropyS(omega = omega,tau = tau,X = X1,beta = beta_use[i],pi_bm = pi_bm)
g <- sample(1:10,1,T)
p <- p_flip(tau = tau, omega = omega, X = X1, g = g, beta = beta_use[i])
if(p > runif(1)){
X1[g] <- -X1[g]
did_flip[i] <- 1
}
if(Hebb) {
omega <- delta_om(omega = omega,X = X1,e = e,lambda = lambda)
omega <- omega[[2]]
}
prog$tick()$print()
}
for(i in 1:nreps) {
omega_mean[i] <- mean(omega_save[[i]])
}
omega_out <- list(5)
if(nreps>5) {
omega_out[[1]] <- omega_save[[1]]
omega_out[[2]] <- omega_save[[0.25*nreps]]
omega_out[[3]] <- omega_save[[0.50*nreps]]
omega_out[[4]] <- omega_save[[0.75*nreps]]
omega_out[[5]] <- omega_save[[nreps-1]]
}
output <- list("configurations" = dat, "beta" = beta_use, "mean omega" = omega_mean, "did flip" = did_flip, "omega t=1" = omega_out[[1]],"omega t=0.25*nreps" = omega_out[[2]],"omega t=0.50*nreps" = omega_out[[3]], "omega t=0.75*nreps" = omega_out[[4]], "omega t=nreps-1" = omega_out[[5]], "gibbs entropy" = gibbs_entropy)
return(output)
}
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
LIM_simulator <- function(n = 10, nreps = 100, tau, omega, beta, X1 = sample(c(-1,1),n,T), Hebb = T, e =.001, lambda = .001) {
if(n <= 0) {
stop("make sure n is a positive number")
}
if(nreps <= 0) {
stop("make sure nreps is a positive integer")
}
if(length(beta)!=1 && length(beta)!=nreps || !is.numeric(beta)) {
stop("make sure length(beta) is equal to 1 or nreps")
}
if(length(tau)!=n || !is.numeric(tau)) {
stop("make sure that length(tau)==n")
}
if(nrow(omega)!=n || ncol(omega)!=n || all(diag(omega)!=0) || !is.numeric(omega) || omega[lower.tri(omega)]!=t(omega)[lower.tri(omega)]) {
stop("make sure that omega is a symmetrical matrix with dimensions n*n and diag==0")
}
if(length(X1)!=n) {
stop("length(X1) must be n")
}
beta_use <- beta
if(length(beta)==1) {
beta_use <- rep(beta,nreps)
}
# wat ik nu heb: n, nreps, tau, omega, beta, X1
bm <- as.matrix(expand.grid(rep(list(0:1),n)))
bm[bm==0] <- -1
omega_save <- list(nreps)
dat <- matrix(0,nrow = nreps, ncol = n)
gibbs_entropy <- numeric(nreps)
did_flip <- numeric(nreps)
omega_mean <- numeric(nreps)
prog = dplyr::progress_estimated(nreps)
for(i in 1:nreps) {
omega_save[[i]] <- omega
dat[i,] <- X1
pi_bm <- probability_bm(omega = omega,tau = tau,n = n,beta = beta_use[i],bm = bm)
gibbs_entropy[i] <- entropyS(omega = omega,tau = tau,X = X1,beta = beta_use[i],pi_bm = pi_bm)
g <- sample(1:10,1,T)
p <- p_flip(tau = tau, omega = omega, X = X1, g = g, beta = beta_use[i])
if(p > runif(1)){
X1[g] <- -X1[g]
did_flip[i] <- 1
}
if(Hebb) {
omega <- delta_om(omega = omega,X = X1,e = e,lambda = lambda)
omega <- omega[[2]]
}
prog$tick()$print()
}
for(i in 1:nreps) {
omega_mean[i] <- mean(omega_save[[i]])
}
omega_out <- list(5)
if(nreps>5) {
omega_out[[1]] <- omega_save[[1]]
omega_out[[2]] <- omega_save[[0.25*nreps]]
omega_out[[3]] <- omega_save[[0.50*nreps]]
omega_out[[4]] <- omega_save[[0.75*nreps]]
omega_out[[5]] <- omega_save[[nreps-1]]
}
output <- list("configurations" = dat, "beta" = beta_use, "mean omega" = omega_mean, "did flip" = did_flip, "omega t=1" = omega_out[[1]],"omega t=0.25*nreps" = omega_out[[2]],"omega t=0.50*nreps" = omega_out[[3]], "omega t=0.75*nreps" = omega_out[[4]], "omega t=nreps-1" = omega_out[[5]], "gibbs entropy" = gibbs_entropy)
return(output)
}
devtools::install_github("BenjiUvA/Learning_Ising_Model")
library(Learning_Ising_Model)
devtools::install_github("BenjiUvA/Learning_Ising_Model")
library(Learning_Ising_Model)
install.packages("digest")
library(digest)
library(LearningIsingModel)
devtools::install_github("BenjiUvA/Learning_Ising_Model")
library(Learning_Ising_Model)
library(LearningIsingModel)
library(LearningIsingModel)
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
library(testthat)
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
somematrix <- (1:9,3,3)
somematrix <- matrix(1:9,3,3)
isSymmetric(somematrix)
somematrix <- matrix(1,3,3)
isSymmetric(somematrix)
omega
isSymmetric(omega)
library(LearningIsingModel)
