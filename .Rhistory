0.023456011667779, -0.023456011667779, 0.023456011667779,
0.017703023431198, 0, 0.00799124877757089, -0.00394269539490673,
-0.00799124877757089, 0.00799124877757089, -3.54194199331317e-05,
0.00799124877757089, -0.00799124877757089, 0.00799124877757089,
0.01381166912731, 0.00799124877757089, 0), .Dim = c(10L,
10L)), `omega t=0.75*nreps` = structure(c(0, -0.00169584517718299,
0.00169584517718299, -0.0114998919872994, 0.00169584517718299,
-0.00169584517718299, 0.0135502624388501, -0.00410406253694551,
0.00566910455585496, -0.0137474756729842, -0.00169584517718299,
0, -0.0347680947300731, 0.0251966375488561, -0.0347680947300731,
0.0347680947300731, -0.0231699990212247, -0.0291516695021167,
-0.0270275555132319, -0.0196704305477197, 0.00169584517718299,
-0.0347680947300731, 0, -0.0251966375488561, 0.0347680947300731,
-0.0347680947300731, 0.0231699990212247, 0.0291516695021167,
0.0270275555132319, 0.0196704305477197, -0.0114998919872994,
0.0251966375488561, -0.0251966375488561, 0, -0.0251966375488561,
0.0251966375488561, -0.0134828760440436, -0.0195237095041943,
-0.0173791422794676, -0.00994519569717143, 0.00169584517718299,
-0.0347680947300731, 0.0347680947300731, -0.0251966375488561,
0, -0.0347680947300731, 0.0231699990212247, 0.0291516695021167,
0.0270275555132319, 0.0196704305477197, -0.00169584517718299,
0.0347680947300731, -0.0347680947300731, 0.0251966375488561,
-0.0347680947300731, 0, -0.0231699990212247, -0.0291516695021167,
-0.0270275555132319, -0.0196704305477197, 0.0135502624388501,
-0.0231699990212247, 0.0231699990212247, -0.0134828760440436,
0.0231699990212247, -0.0231699990212247, 0, 0.0174857023832871,
0.0231620070212247, 0.00788988787057922, -0.00410406253694551,
-0.0291516695021167, 0.0291516695021167, -0.0195237095041943,
0.0291516695021167, -0.0291516695021167, 0.0174857023832871,
0, 0.0213659733246594, 0.0253526872020482, 0.00566910455585496,
-0.0270275555132319, 0.0270275555132319, -0.0173791422794676,
0.0270275555132319, -0.0270275555132319, 0.0231620070212247,
0.0213659733246594, 0, 0.0118085036867444, -0.0137474756729842,
-0.0196704305477197, 0.0196704305477197, -0.00994519569717143,
0.0196704305477197, -0.0196704305477197, 0.00788988787057922,
0.0253526872020482, 0.0118085036867444, 0), .Dim = c(10L,
10L)), `omega t=nreps-1` = structure(c(0, -0.00168893841570224,
-0.0042978305901909, -0.011380517511746, 0.00168893841570224,
-0.00367161645091884, 0.0074751273589642, -0.00404901957420491,
0.00559537474137717, -0.0135772888167658, -0.00168893841570224,
0, -0.0362423919285254, 0.0364674020654771, -0.04581165436884,
0.0439173457302886, -0.0286845949890931, -0.0403285504506627,
-0.0150275555132319, -0.0310723747962162, -0.0042978305901909,
-0.0362423919285254, 0, -0.0268041338200967, 0.0362423919285254,
-0.0343290260125345, 0.030633201815115, 0.0307041264434989,
0.0248081194197333, 0.0213548310598351, -0.011380517511746,
0.0364674020654771, -0.0268041338200967, 0, -0.0364674020654771,
0.0345543674704059, -0.0191704517700489, -0.0309291365804506,
-0.00537914227946758, -0.0215779951597159, 0.00168893841570224,
-0.04581165436884, 0.0362423919285254, -0.0364674020654771,
0, -0.0439173457302886, 0.0286845949890931, 0.0403285504506627,
0.0150275555132319, 0.0310723747962162, -0.00367161645091884,
0.0439173457302886, -0.0343290260125345, 0.0345543674704059,
-0.0439173457302886, 0, -0.02675604724334, -0.0384232536279066,
-0.0169795004022055, -0.0291485285232508, 0.0074751273589642,
-0.0286845949890931, 0.030633201815115, -0.0191704517700489,
0.0286845949890931, -0.02675604724334, 0, 0.0231018009603332,
0.0170712088098856, 0.0136773357406451, -0.00404901957420491,
-0.0403285504506627, 0.0307041264434989, -0.0309291365804506,
0.0403285504506627, -0.0384232536279066, 0.0231018009603332,
0, 0.00936597332465943, 0.0366197474506856, 0.00559537474137717,
-0.0150275555132319, 0.0248081194197333, -0.00537914227946758,
0.0150275555132319, -0.0169795004022055, 0.0170712088098856,
0.00936597332465943, 0, -0.000191496313255618, -0.0135772888167658,
-0.0310723747962162, 0.0213548310598351, -0.0215779951597159,
0.0310723747962162, -0.0291485285232508, 0.0136773357406451,
0.0366197474506856, -0.000191496313255618, 0), .Dim = c(10L,
10L)), `gibbs entropy` = c(10, 9.99999994589792, 9.9999991349689,
9.999995620021, 9.99998822850812, 9.99997264844868, 9.99994372419684,
9.99990637667304, 9.99984831430323, 9.99974942531075, 9.99960626817292,
9.99943602650911, 9.99920691020122, 9.99890457652609, 9.99851256543601,
9.99801208817402, 9.99738178168223, 9.99659742515109, 9.99563164445822,
9.99473949414075, 9.99367626727595, 9.99272718251467, 9.99162459808228,
9.99034371225391, 9.98885657404957, 9.98713171521629, 9.98476579845246,
9.98200408853131, 9.97878995480275, 9.97609568647019, 9.97303009782583,
9.96954299245885, 9.96557807740424, 9.96235780752303, 9.95877533225432,
9.95385954882801, 9.94824971230558, 9.941905620175, 9.93473395058527,
9.92703100393617, 9.92103909481226, 9.9116152985912, 9.90100451057323,
9.88905997612421, 9.87983340153679, 9.8699848123647, 9.86197707623587,
9.85337211191141, 9.8441115241236, 9.8341304846154))
)
})
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
output$`mean omega`
plot(output$`mean omega`)
plot(output$`gibbs entropy`)
plot(output$beta)
dput(output$`mean omega`)
test_that("LIM_simulator", {
set.seed(42)
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -6e-05, 0, 6e-05, 0.00011988, 6.003920127936e-05, 1.98084156161253e-07,
-9.93244675375872e-05, -0.000198767974127948, -0.00025884717285976,
-0.000318806692554428, -0.000417853057481155, -0.000516701329678027,
-0.000575273577347445, -0.000633727086271931, -0.000692064884983364,
-0.000750365610652579, -0.000808630374230455, -0.000866858608281175,
-0.000806940875327191, -0.000747062977839114, -0.000805097712705765,
-0.000863050655088604, -0.000920927691586677, -0.000978728974011754,
-0.0010759080254231, -0.00113325043885718, -0.001230123126481,
-0.00132688206872957, -0.00138398669683671, -0.00144097711568764,
-0.00149785355370086, -0.00159454580784474, -0.00165090638450296,
-0.00158945220026553, -0.00164643441902439, -0.0017421892975602,
-0.00183784477675269, -0.00189424674588556, -0.00195061591108017,
-0.00200695233794439, -0.00206325609195488, -0.00216140926936848,
-0.00225948614042725, -0.0023574868577439, -0.00241516506101535,
-0.00247272790788027, -0.00257030413708675, -0.00262563604155802,
-0.00256417596404198) )
})
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
dput(output$`mean omega`)
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(43)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
})
output$configurations
dput(output$configurations[1:50])
dput(output$configurations[1:50,])
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
LIM_simulator <- function(n = 10, nreps = 100, tau, omega, beta, X1 = sample(c(-1,1),n,T), Hebb = T, e =.001, lambda = .001) {
if(n <= 0) {
stop("make sure n is a positive number")
}
if(nreps <= 0) {
stop("make sure nreps is a positive integer")
}
if(length(beta)!=1 && length(beta)!=nreps || !is.numeric(beta)) {
stop("make sure length(beta) is equal to 1 or nreps")
}
if(length(tau)!=n || !is.numeric(tau)) {
stop("make sure that length(tau)==n")
}
if(nrow(omega)!=n || ncol(omega)!=n || all(diag(omega)!=0) || !is.numeric(omega) || omega[lower.tri(omega)]!=t(omega)[lower.tri(omega)]) {
stop("make sure that omega is a symmetrical matrix with dimensions n*n and diag==0")
}
if(length(X1)!=n) {
stop("length(X1) must be n")
}
beta_use <- beta
if(length(beta)==1) {
beta_use <- rep(beta,nreps)
}
# wat ik nu heb: n, nreps, tau, omega, beta, X1
bm <- as.matrix(expand.grid(rep(list(0:1),n)))
bm[bm==0] <- -1
omega_save <- list(nreps)
dat <- matrix(0,nrow = nreps, ncol = n)
gibbs_entropy <- numeric(nreps)
did_flip <- numeric(nreps)
omega_mean <- numeric(nreps)
prog = dplyr::progress_estimated(nreps)
for(i in 1:nreps) {
omega_save[[i]] <- omega
dat[i,] <- X1
pi_bm <- probability_bm(omega = omega,tau = tau,n = n,beta = beta_use[i],bm = bm)
gibbs_entropy[i] <- entropyS(omega = omega,tau = tau,X = X1,beta = beta_use[i],pi_bm = pi_bm)
g <- sample(1:10,1,T)
p <- p_flip(tau = tau, omega = omega, X = X1, g = g, beta = beta_use[i])
if(p > runif(1)){
X1[g] <- -X1[g]
did_flip[i] <- 1
}
if(Hebb) {
omega <- delta_om(omega = omega,X = X1,e = e,lambda = lambda)
omega <- omega[[2]]
}
prog$tick()$print()
}
for(i in 1:nreps) {
omega_mean[i] <- mean(omega_save[[i]])
}
omega_out <- list(5)
if(nreps>5) {
omega_out[[1]] <- omega_save[[1]]
omega_out[[2]] <- omega_save[[0.25*nreps]]
omega_out[[3]] <- omega_save[[0.50*nreps]]
omega_out[[4]] <- omega_save[[0.75*nreps]]
omega_out[[5]] <- omega_save[[nreps-1]]
}
output <- list("configurations" = dat, "beta" = beta_use, "mean omega" = omega_mean, "did flip" = did_flip, "omega t=1" = omega_out[[1]],"omega t=0.25*nreps" = omega_out[[2]],"omega t=0.50*nreps" = omega_out[[3]], "omega t=0.75*nreps" = omega_out[[4]], "omega t=nreps-1" = omega_out[[5]], "gibbs entropy" = gibbs_entropy)
return(output)
}
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
#'@export
test_that("LIM_simulator", {
n <- 10
nreps <- 50
tau <- rep(0,n)
omega <- matrix(0,n,n)
beta <- seq(0,2,2/(nreps-1))
X1 <- rep(c(-1,1),5)
Hebb <- T
e <- .001
lambda <- .001
set.seed(42)
output <- LIM_simulator(n = n, nreps = nreps, tau = tau, omega = omega, beta = beta, X1 = X1, Hebb = T, e = e, lambda = lambda)
expect_equal(output$`mean omega`,c(0, -1e-04, -0.0001998, -0.0002994004, -0.00035892135936, -0.00041828327680128,
-0.000477486470407678, -0.00041700934369727, -0.000356572931400283,
-0.000415780104897802, -0.000474908864048327, -0.000414435542915822,
-0.000354002849065262, -0.000293611020602403, -0.00023325997579647,
-0.000172949633080148, -0.00011267991104926, -5.24545512271612e-05,
7.65035787529317e-06, -5.11002403208741e-05, -0.000109853337320649,
-5.02654281679529e-05, 9.24148142195777e-06, 6.86693771926886e-05,
0.000128018417171878, 0.000187288759071109, 0.000127182695783332,
6.70782613989277e-05, 7.01403588329225e-06, -9.15902966123254e-05,
-0.000190117420442952, -0.00028856247921476, -0.000386890647869025,
-0.000445388514053384, -0.000503809384505373, -0.000601001292889821,
-0.000658688293980078, -0.000716299921068155, -0.000773836324902055,
-0.000870808671495276, -0.000930200775032583, -0.00102717825555562,
-0.0011240417811176, -0.00122077906237166, -0.00127738720365678,
-0.00137459256086987, -0.00143328183721223, -0.00149185373500191,
-0.00155030848899601, -0.00160863867362959))
expect_equal(output$configurations[1:50,],structure(c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1,
1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1), .Dim = c(50L, 10L)))
})
LIM_simulator <- function(n = 10, nreps = 100, tau, omega, beta, X1 = sample(c(-1,1),n,T), Hebb = T, e =.001, lambda = .001) {
if(n <= 0) {
stop("make sure n is a positive number")
}
if(nreps <= 0) {
stop("make sure nreps is a positive integer")
}
if(length(beta)!=1 && length(beta)!=nreps || !is.numeric(beta)) {
stop("make sure length(beta) is equal to 1 or nreps")
}
if(length(tau)!=n || !is.numeric(tau)) {
stop("make sure that length(tau)==n")
}
if(nrow(omega)!=n || ncol(omega)!=n || all(diag(omega)!=0) || !is.numeric(omega) || omega[lower.tri(omega)]!=t(omega)[lower.tri(omega)]) {
stop("make sure that omega is a symmetrical matrix with dimensions n*n and diag==0")
}
if(length(X1)!=n) {
stop("length(X1) must be n")
}
beta_use <- beta
if(length(beta)==1) {
beta_use <- rep(beta,nreps)
}
# wat ik nu heb: n, nreps, tau, omega, beta, X1
bm <- as.matrix(expand.grid(rep(list(0:1),n)))
bm[bm==0] <- -1
omega_save <- list(nreps)
dat <- matrix(0,nrow = nreps, ncol = n)
gibbs_entropy <- numeric(nreps)
did_flip <- numeric(nreps)
omega_mean <- numeric(nreps)
prog = dplyr::progress_estimated(nreps)
for(i in 1:nreps) {
omega_save[[i]] <- omega
dat[i,] <- X1
pi_bm <- probability_bm(omega = omega,tau = tau,n = n,beta = beta_use[i],bm = bm)
gibbs_entropy[i] <- entropyS(omega = omega,tau = tau,X = X1,beta = beta_use[i],pi_bm = pi_bm)
g <- sample(1:10,1,T)
p <- p_flip(tau = tau, omega = omega, X = X1, g = g, beta = beta_use[i])
if(p > runif(1)){
X1[g] <- -X1[g]
did_flip[i] <- 1
}
if(Hebb) {
omega <- delta_om(omega = omega,X = X1,e = e,lambda = lambda)
omega <- omega[[2]]
}
prog$tick()$print()
}
for(i in 1:nreps) {
omega_mean[i] <- mean(omega_save[[i]])
}
omega_out <- list(5)
if(nreps>5) {
omega_out[[1]] <- omega_save[[1]]
omega_out[[2]] <- omega_save[[0.25*nreps]]
omega_out[[3]] <- omega_save[[0.50*nreps]]
omega_out[[4]] <- omega_save[[0.75*nreps]]
omega_out[[5]] <- omega_save[[nreps-1]]
}
output <- list("configurations" = dat, "beta" = beta_use, "mean omega" = omega_mean, "did flip" = did_flip, "omega t=1" = omega_out[[1]],"omega t=0.25*nreps" = omega_out[[2]],"omega t=0.50*nreps" = omega_out[[3]], "omega t=0.75*nreps" = omega_out[[4]], "omega t=nreps-1" = omega_out[[5]], "gibbs entropy" = gibbs_entropy)
return(output)
}
